package org.demons.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import org.zu.ardulink.Link;
import org.zu.ardulink.RawDataListener;
import org.zu.ardulink.gui.ConnectionStatus;
import org.zu.ardulink.gui.DigitalPinStatus;
import org.zu.ardulink.gui.SerialConnectionPanel;
import org.zu.ardulink.gui.SwitchController;

public class ArduinoCommunicationPanel extends JPanel implements ActionListener {
	private static final long serialVersionUID = -2739228960818599179L;
	
	private Link link = null;
	
	private final int PADDING = 10;
	
	private final SerialConnectionPanel serialConnectionPanel;
	private JButton btnConnect;
	private JButton btnDisconnect;
	
	public ArduinoCommunicationPanel(int width, int height) {
		super();
		
		setSize(width, height);
		setBorder(new EmptyBorder(5, 5, 5, 5));
		setLayout(new BorderLayout(0, 0));
		
		/*
		 * GUI to select connection port
		 */
		serialConnectionPanel = new SerialConnectionPanel();
		serialConnectionPanel.setOpaque(false);
		add(serialConnectionPanel, BorderLayout.NORTH);
		
		/*
		 * Code for connect and disconnect buttons
		 */
		JPanel connectPanel = new JPanel();
		add(connectPanel, BorderLayout.SOUTH);

		btnConnect = new JButton("Connect");
		btnConnect.addActionListener(this);
		connectPanel.add(btnConnect);
		
		btnDisconnect = new JButton("Disconnect");
		btnDisconnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Link.getDefaultInstance().disconnect();
			}
		});
		connectPanel.add(btnDisconnect);
		
		ConnectionStatus connectionStatus = new ConnectionStatus();
		connectPanel.add(connectionStatus);
		
		/*
		 * Code to print to stdout messages from Arduino
		 */
		Link.getDefaultInstance().addRawDataListener(new RawDataListener() {
			
			@Override
			public void parseInput(String id, int numBytes, int[] message) {
				StringBuilder build = new StringBuilder(numBytes + 1);
				for (int i = 0; i < numBytes; i++) {
					build.append((char)message[i]);
				}
				System.out.println(build.toString());
			}
		});
		
		repaint();
	}
	
	public void setLink(Link l) {
		link = l;
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		g.setColor(Color.GREEN);
		g.fillRect(0, 0, getWidth(), getHeight());
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {	
		String comPort = serialConnectionPanel.getConnectionPort();
		String baudRateS = serialConnectionPanel.getBaudRate();
				
		try {
			int baudRate = Integer.parseInt(baudRateS);
								
			Link.getDefaultInstance().connect(comPort, baudRate);
		}
		catch(Exception ex) {
			ex.printStackTrace();
			String message = ex.getMessage();
			if(message == null || message.trim().equals("")) {
				message = "Generic Error on connection";
			}
			JOptionPane.showMessageDialog(btnConnect, message, "Error", JOptionPane.ERROR_MESSAGE);
		}
	}
}
