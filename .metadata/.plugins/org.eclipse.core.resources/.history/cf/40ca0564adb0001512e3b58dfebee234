package org.demons.ctrl;

import org.apache.commons.math3.analysis.function.Pow;
import org.zu.ardulink.Link;
import org.zu.ardulink.protocol.IProtocol;

public class WindSpeedDisplay {
	private Link link = Link.getDefaultInstance();
	
	private static final double EPSILON = Math.pow(10, -10);
	
	private final int[][] DIGIT_PIN;
	private final int E_PIN;
	
	public WindSpeedDisplay() {
		DIGIT_PIN = new int[4][4];
		
		DIGIT_PIN[3][3] = 28;
		DIGIT_PIN[3][2] = 22;
		DIGIT_PIN[3][1] = 24;
		DIGIT_PIN[3][0] = 26;
		
		DIGIT_PIN[2][3] = 36;
		DIGIT_PIN[2][2] = 30;
		DIGIT_PIN[2][1] = 32;
		DIGIT_PIN[2][0] = 34;
		
		DIGIT_PIN[1][3] = 29;
		DIGIT_PIN[1][2] = 23;
		DIGIT_PIN[1][1] = 25;
		DIGIT_PIN[1][0] = 27;
		
		DIGIT_PIN[0][3] = 37;
		DIGIT_PIN[0][2] = 31;
		DIGIT_PIN[0][1] = 33;
		DIGIT_PIN[0][0] = 35;
		
		E_PIN = 38;
	}
	
	public void displayValue(double value) {
		value = Math.abs(value);
		
		value = Math.max(value, EPSILON);
		
		// The exponent
		int d = (int) Math.floor(Math.log10(value));
		
		if(d > 9) {
			value = 9.99 * Math.pow(10,9)
		}
		
		// Mantissa of number in scientific notation
		double x = value / Math.pow(10, d);
		
		int[] digits = new int[4];
		digits[3] = (int) Math.floor(x);
		digits[2] = (int) Math.floor(10*x) % 10;
		digits[1] = (int) Math.floor(100*x) % 10;
		digits[0] = Math.abs(d) % 10;
		
		
	}
	
	public void displayDigit(int digit, int value) {
		for(int pin = 3; pin >= 0; pin--) {
			link.sendPowerPinSwitch(DIGIT_PIN[digit][pin], (value % 2 == 1) ? IProtocol.HIGH : IProtocol.LOW);
			
			value >>= 1;
		}
	}
}
