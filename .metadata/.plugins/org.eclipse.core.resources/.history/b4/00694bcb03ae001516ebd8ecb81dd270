package org.demons.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import org.demons.utils.MegaConstants;
import org.zu.ardulink.Link;
import org.zu.ardulink.event.AnalogReadChangeEvent;
import org.zu.ardulink.event.AnalogReadChangeListener;
import org.zu.ardulink.event.DigitalReadChangeEvent;
import org.zu.ardulink.event.DigitalReadChangeListener;

import sun.awt.RepaintArea;

public class ArduinoStatSummary extends JPanel {
	private static final long serialVersionUID = -2739228960818599179L;
	
	private Link link = null;
	
	private final int PADDING = 25;
	
	private Font titleFont, regularFont, tableFont;
	
	private JLabel title, stat;
	private JPanel descBar;
	private JScrollPane list = null;
	private int digitalPin = 0;
	private int analogPin = 0;
	
	class Listing extends JPanel {
		JLabel nameLabel, valLabel;
		
		Listing(String name, String val) {
			super();
			setSize(list.getWidth(), list.getHeight());
			setLayout(new GridLayout(1, 2));
			
			nameLabel = new JLabel(name);
			valLabel = new JLabel(val);
		}
		
		protected JLabel getNameLabel() {
			return nameLabel;
		}
		
		protected JLabel getValLabel() {
			return valLabel;
		}
	}
	
	private Listing[] pinListings;
	
	public ArduinoStatSummary(int width, int height) {
		super();
		
		setLayout(null);
		setSize(width, height);
		
		titleFont = new Font("Century", Font.BOLD, 14);
		regularFont = new Font("Dialog", Font.BOLD, 14);
		tableFont = new Font("Dialog", Font.BOLD, 12);
		
		title = new JLabel("ARDUINO STAT SUMMARY", JLabel.CENTER);
		title.setFont(titleFont);
		title.setBounds(PADDING, PADDING, width-2*PADDING, 15);
		title.setForeground(Color.BLUE);
		
		stat = new JLabel("Port: ");
		stat.setFont(regularFont);
		stat.setBounds(PADDING, PADDING+title.getHeight(), width-2*PADDING, regularFont.getSize()+PADDING);
		
		descBar = new JPanel();
		descBar.setLayout(new GridLayout(1, 2));
		JLabel left = new JLabel("Arduino Pin");
		left.setFont(tableFont);
		JLabel right = new JLabel("Value");
		right.setFont(tableFont);
		descBar.add(left);
		descBar.add(right);
		descBar.setBounds(PADDING, PADDING+title.getHeight()+stat.getHeight(), width-2*PADDING, tableFont.getSize()+2);
		
		list = new JScrollPane();
		list.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		list.setBounds(PADDING, 2*PADDING+title.getHeight()+stat.getHeight()+descBar.getHeight(), width-2*PADDING, height-3*PADDING-title.getHeight()-stat.getHeight()-descBar.getHeight());
		list.setOpaque(false);
		list.getViewport().setOpaque(false);
		
		add(title);
		add(stat);
		add(descBar);
		add(list);
		
		repaint();
	}
	
	public ArduinoStatSummary(int width, int height, Font f) {
		this(width, height);
		titleFont = f;
		title.setFont(f);
		title.setBounds(PADDING, PADDING, width-2*PADDING, f.getSize());
		stat.setBounds(PADDING, PADDING+title.getHeight(), width-2*PADDING, regularFont.getSize()+PADDING);
		descBar.setBounds(PADDING, PADDING+title.getHeight()+stat.getHeight(), width-2*PADDING, tableFont.getSize()+2);
		list.setBounds(PADDING, 2*PADDING+title.getHeight()+stat.getHeight(), width-2*PADDING, height-3*PADDING-title.getHeight()-stat.getHeight()-descBar.getHeight());
	}
	
	public void setLink(Link l) {
		link = l;
	}
	
	public void setPortStatus(String msg) {
		stat.setText("Port: " + msg);
	}
	
	public void showSummary() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				System.out.println("RUN");
				if(link != null && link.isConnected()) {
					pinListings = new Listing[MegaConstants.DIGITAL_INPUT_PIN_MAX+1];
					
					for(digitalPin = 0; digitalPin <= MegaConstants.DIGITAL_INPUT_PIN_MAX; digitalPin++) {
						DigitalReadChangeListener drgl = new DigitalReadChangeListener() {
							@Override
							public void stateChanged(DigitalReadChangeEvent e) {
								int value = e.getValue();
								pinListings[digitalPin] = new Listing("DIGITAL " + digitalPin, (value == DigitalReadChangeEvent.POWER_HIGH) ? "HIGH" : "LOW");
							}
							
							@Override
							public int getPinListening() {
								return digitalPin;
							}
						};
						
						link.addDigitalReadChangeListener(drgl);
						
						try {
							Thread.sleep(5);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
						
						link.removeDigitalReadChangeListener(drgl);
					}
				}
				
				list.removeAll();
				for(Listing pinListing : pinListings) {
					if(pinListing != null)
						list.add(pinListing);
				}
				
				repaint();
			}
		});
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		g.setColor(new Color(128, 128, 255));
		g.fillRect(0, 0, getWidth(), getHeight());
	}
}
