package org.demons.gui;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import org.demons.utils.MegaConstants;
import org.zu.ardulink.Link;
import org.zu.ardulink.RawDataListener;
import org.zu.ardulink.event.AnalogReadChangeListener;
import org.zu.ardulink.event.DigitalReadChangeEvent;
import org.zu.ardulink.event.DigitalReadChangeListener;

public class OperationFrame extends JPanel implements ActionListener {
	// Generated Serial Version UID
	private static final long serialVersionUID = -3754531649923171524L;
	
	/**
	 * List of panels of the GUI
	 * Panel Hierarchy:
	 * 
	 * OperationFrame
	 * 	> left
	 * 	> center
	 * 		- wtgd (WindTunnelGraphicsDisplay)
	 * 		- csl (Console)
	 * 		- sp (SettingsPanel)
	 * 	> right
	 * 		- acp (ArduinoCommunicationPanel)
	 * 		- ass (ArduinoStatSummary)
	 * 		- apm (ArduinoPinManager)
	 */
	private JPanel left, center, right;
	
	private HistoryValuesPanel hvp;
	private CurrentValuesPanel cvp;
	
	private WindTunnelGraphicsDisplay wtgd;
	private Console csl;
	private SettingsPanel sp;
	
	private ArduinoCommunicationPanel acp;
	private ArduinoStatSummary ass;
	private ArduinoPinManager apm;
	
	// Separators that divide up the panels
	private JSeparator divL, divR; // Divide the content pane into left and right
	
	private Link link = Link.getDefaultInstance();
	
	private Timer timer;
	private final int REFRESH_RATE = 1000;
	
	private DigitalReadChangeListener[] drcl;
	private AnalogReadChangeListener[] arcl;
	private int digitalPin, analogPin;
	
	private Font titleFont = new Font("Century", Font.BOLD, 16);
	
	// Class constructor
	public OperationFrame() {
		super();
		
		// Initialize components
		initContent();
		setupLink();
	}
	
	private void initContent() {
		// Coordinate points for panel boundaries
		int width = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
		int height = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
		int div1 = width / 5;
		int div2 = width / 5 * 4;
		int spc = 1;
		
		// Set content panel
		setLayout(null);
		setBounds(0, 0, width, height);
		
		// Initialize the left, center, and right panels
		left = new JPanel();
		left.setLayout(null);
		center = new JPanel();
		center.setLayout(null);
		right = new JPanel();
		right.setLayout(new GridLayout(3,1));
		
		// Initialize the left and right separators for the content pane
		divL = new JSeparator(JSeparator.VERTICAL);
		divR = new JSeparator(JSeparator.VERTICAL);		
		
		// Set boundaries for left, center, and right panels
		left.setBounds(0, 0, div1-spc, height);
		center.setBounds(div1+spc, 0, div2-div1-1-spc, height);
		right.setBounds(div2+spc, 0, width-div2-spc, height);
		
		// Set boundaries for the content pane separators
		divL.setBounds(div1, 0, div1, height);
		divR.setBounds(div2, 0, div2, height);
		
		hvp = new HistoryValuesPanel(left.getWidth(), left.getHeight() / 5 * 3);
		hvp.setBounds(0, 0, hvp.getWidth(), hvp.getHeight());
		cvp = new CurrentValuesPanel(left.getWidth(), left.getHeight() / 5 * 2);
		cvp.setBounds(0, hvp.getHeight(), cvp.getWidth(), cvp.getHeight());
		
		left.add(hvp);
		left.add(cvp);
		
		wtgd = new WindTunnelGraphicsDisplay(center.getWidth(), center.getHeight() / 2);
		wtgd.setBounds(0, 0, wtgd.getWidth(), wtgd.getHeight());
		csl = new Console(center.getWidth(), center.getHeight() / 3);
		csl.setBounds(0, wtgd.getHeight(), csl.getWidth(), csl.getHeight());
		sp = new SettingsPanel(center.getWidth(), center.getHeight() / 6);
		sp.setBounds(0, wtgd.getHeight()+csl.getHeight(), sp.getWidth(), sp.getHeight());
		
		center.add(wtgd);
		center.add(csl);
		center.add(sp);
		
		acp = new ArduinoCommunicationPanel(right.getWidth(), right.getHeight() / 3, (ActionListener)this);
		ass = new ArduinoStatSummary(right.getWidth(), right.getHeight() / 3, titleFont);
		apm = new ArduinoPinManager(right.getWidth(), right.getHeight() / 3);
		
		right.add(acp);
		right.add(ass);
		right.add(apm);
		
		// Add components to content
		add(left);
		add(center);
		add(right);
		
		add(divL);
		add(divR);
	}
	
	void setupLink() {
		acp.setLink(link);
		ass.setLink(link);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getActionCommand() == "ACCESS") {
			System.out.println("ACCESS");
			
			if(link != null && link.isConnected()) {
				new Thread(new Runnable() {
					@Override
					public void run() {
						drcl = new DigitalReadChangeListener[MegaConstants.DIGITAL_INPUT_PIN_MAX+1];
						for(int i = 0; i <= MegaConstants.DIGITAL_INPUT_PIN_MAX; i++) {
							digitalPin = i;
							drcl[i] = new DigitalReadChangeListener() {
								int pin = digitalPin;
								
								@Override
								public void stateChanged(DigitalReadChangeEvent e) {
									int value = e.getValue();
									System.out.print(pin + " ");
									
									if(value == DigitalReadChangeEvent.POWER_HIGH) {
										System.out.println("HIGH");
									} else if(value == DigitalReadChangeEvent.POWER_LOW) {
										System.out.println("LOW");
									}
									
									ass.setInfo(pin, value);
									repaint();
								}
								
								@Override
								public int getPinListening() {
									return pin;
								}
							};
							link.addDigitalReadChangeListener(drcl[i]);
							try {
								Thread.sleep(10);
							} catch (InterruptedException e1) {
								e1.printStackTrace();
							}
						}
						arcl = new AnalogReadChangeListener[MegaConstants.ANALOG_INPUT_PIN_MAX+1];
						for(int i = 0; i < MegaConstants.ANALOG_INPUT_PIN_MAX; i++) {
							analogPin = i;
							arcl[i] = new AnalogReadChangeListener() {
								int pin = analogPin;
								
								@Override
								public void stateChanged(AnalogReadChangeEvent e) {
									int value = e.getValue();
									System.out.print(pin + " ");
									
									System.out.println(value);
									
									ass.setInfo(MegaConstants.DIGITAL_INPUT_PIN_MAX+1+pin, value);
									repaint();
								}
								
								@Override
								public int getPinListening() {
									return pin;
								}
							};
							link.addAnalogReadChangeListener(arcl[i]);
							try {
								Thread.sleep(10);
							} catch (InterruptedException e1) {
								e1.printStackTrace();
							}
						}
					}
				}).start();
			}
		}
	}
}
