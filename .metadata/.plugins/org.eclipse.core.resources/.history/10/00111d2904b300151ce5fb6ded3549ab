package org.demons.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;

import org.demons.gui.ArduinoStatSummary.Listing;
import org.demons.utils.MegaConstants;
import org.zu.ardulink.Link;
import org.zu.ardulink.protocol.IProtocol;

import com.sun.corba.se.impl.orbutil.threadpool.TimeoutException;

class HistoryValuesPanel extends JPanel {
	private static final long serialVersionUID = -2739228960818599179L;
	private Link link = null;
	
	private OperationFrame parent;
	
	private final int PADDING = 10;
	
	private Font titleFont, regularFont, tableFont;
	
	private JLabel title;
	private JPanel descBar, mainPanel;
	private JScrollPane scrollPanel;
	private JTextArea scrollArea;
	private String textString = " ";
	private double time = 0;

	public HistoryValuesPanel(int width, int height, OperationFrame parent) {
		super();
		
		setLayout(null);
		setSize(width, height);
		
		titleFont = new Font("Century", Font.BOLD, 16);
		regularFont = new Font("Dialog", Font.BOLD, 14);
		tableFont = new Font("Dialog", Font.BOLD, 12);
		
		title = new JLabel("HISTORY OF VALUES", JLabel.CENTER);
		title.setFont(titleFont);
		title.setBounds(PADDING+5, PADDING+10, width-2*PADDING, 16);
		title.setForeground(Color.BLACK);
		
		descBar = new JPanel();
		JLabel desc = new JLabel("Time            Speed            Lift            Drag");
		desc.setFont(tableFont);
		descBar.add(desc);
		descBar.setBounds(0, 0, width,12);

		mainPanel = new JPanel();
		mainPanel.setBounds(PADDING, 2*PADDING+title.getHeight()+descBar.getHeight(), width-2*PADDING, height-3*PADDING-title.getHeight()-descBar.getHeight());
		
		scrollArea = new JTextArea(35,30);
		scrollArea.setEditable(false);
		
		scrollPanel = new JScrollPane(scrollArea);		
		scrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		
		mainPanel.add(descBar);
		mainPanel.add(scrollPanel);	
		
		add(title);
		add(mainPanel);
		
		this.parent = parent;
		
		repaint();
	}
	
	public void runHistory()
	{
		textString += "\n    "+(time + "\t" + "  "+ parent.getAss().getInfo(false,10)+ "\t" + "  " + parent.getAss().getInfo(false,11)+ "\t" + "  " + parent.getAss().getInfo(false, 12));
		scrollArea.setText(textString);
		time += parent.REFRESH_RATE/1000.0;
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		g.setColor(Color.GRAY);
		g.fillRect(0, 0, getWidth(), getHeight());
	}
	
}
